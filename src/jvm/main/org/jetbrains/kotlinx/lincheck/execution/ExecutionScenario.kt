/*
 * Lincheck
 *
 * Copyright (C) 2019 - 2023 JetBrains s.r.o.
 *
 * This Source Code Form is subject to the terms of the
 * Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed
 * with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package org.jetbrains.kotlinx.lincheck.execution

import org.jetbrains.kotlinx.lincheck.Actor
import org.jetbrains.kotlinx.lincheck.appendExecutionScenario
import java.util.stream.Stream

/**
 * This class represents an execution scenario, which
 * is generated by an [ExecutionGenerator] and then \
 * used by a [Strategy] which produces an [ExecutionResult].
 */
class ExecutionScenario(
    /**
     * The initial sequential part of the execution.
     * It helps to produce different initial states
     * before the parallel part.
     *
     * The initial execution part should contain only non-suspendable actors;
     * otherwise, the single initial execution thread will suspend with no chance to be resumed.
     *
     * TODO: explain init/post are executed in the 1st thread
     */
    val initExecution: List<Actor>,
    /**
     * The parallel part of the execution, which is used
     * to find an interleaving with incorrect behaviour.
     */
    val parallelExecution: List<List<Actor>>,
    /**
     * The last sequential part is used to test that
     * the data structure is in some correct state.
     *
     * If this execution scenario contains suspendable actors, the post part should be empty;
     * if not, an actor could resume a previously suspended one from the parallel execution part.
     */
    val postExecution: List<Actor>
) {
    val threads: Int
        /**
         * Returns the number of threads used in the parallel part of this execution.
         */
        get() = parallelExecution.size

    override fun toString(): String {
        val sb = StringBuilder()
        sb.appendExecutionScenario(this)
        return sb.toString()
    }
}

/**
 * Returns `true` if there is at least one suspendable actor in the generated scenario
 */
fun ExecutionScenario.hasSuspendableActors(): Boolean =
    (parallelExecution.flatten() + postExecution).any { it.isSuspendable }